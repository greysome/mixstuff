* Knuth's elevator simulator from 2.2.5, modified according to the exercises
* THE ELEVATOR SIMULATION
IN	EQU	1:1
LLINK1	EQU	2:3
RLINK1	EQU	4:5
NEXTINST	EQU	0:2
OUT	EQU	1:1
LLINK2	EQU	2:3
RLINK2	EQU	4:5
* FIXED-SIZE TABLES AND LIST HEADS
WAIT	CON	*+2(LLINK1),*+2(RLINK1)
	CON	0
USER1	CON	*-2(LLINK1),*-2(RLINK1)
	CON	0
	JMP	U1
ELEV1	CON	0
	CON	0
	JMP	E1
ELEV2	CON	0
	CON	0
	JMP	E5
ELEV3	CON	0
	CON	0
	JMP	E9
AVAIL	CON	0
TIME	CON	0
QUEUE	EQU	*-3
	CON	*-3(LLINK2),*-3(RLINK2)
	CON	*-3(LLINK2),*-3(RLINK2)
	CON	*-3(LLINK2),*-3(RLINK2)
	CON	*-3(LLINK2),*-3(RLINK2)
	CON	*-3(LLINK2),*-3(RLINK2)
ELEVATOR	EQU	*-3
	CON	*-3(LLINK2),*-3(RLINK2)
	CON	0
	CON	0
	CON	0
	CON	0
CALL	CON	0
	CON	0
	CON	0
	CON	0
	CON	0
	CON	0
	CON	0
	CON	0
	CON	0
D1	CON	0
D2	CON	0
D3	CON	0
* SUBROUTINES AND CONTROL ROUTINE
INSERT	STJ	9F
	LD2	3,1(LLINK2)
	ST2	3,6(LLINK2)
	ST6	3,1(LLINK2)
	ST6	3,2(LLINK2)
	ST1	3,6(LLINK2)
9H	JMP	*
DELETE	STJ	9F
	LD1	3,6(LLINK2)
	LD2	3,6(RLINK2)
	ST1	3,2(LLINK2)
	ST2	3,1(RLINK2)
9H	JMP	*
IMMED	STJ	9F
	LDA	TIME
	STA	1,6
	ENT1	WAIT
	JMP	2F
HOLD	ADD	TIME
SORTIN	STJ	9F
	STA	1,6
	ENT1	WAIT
	LD1	0,1(LLINK1)
	CMPA	1,1
	JL	*-2
2H	LD2	0,1(RLINK1)
	ST2	0,6(RLINK1)
	ST1	0,6(RLINK1)
	ST6	0,1(RLINK1)
	ST6	0,2(RLINK1)
9H	JMP	*
DELETEW	STJ	9F
	LD1	0,6(LLINK1)
	LD2	0,6(RLINK1)
	ST1	0,2(LLINK1)
	ST2	0,1(RLINK1)
9H	JMP	*
CYCLE1	STJ	2,6(NEXTINST)
	JMP	CYCLE
HOLDC	STJ	2,6(NEXTINST)
	JMP	HOLD
CYCLE	LD6	WAIT(RLINK1)
	LDA	1,6
	STA	TIME
	JMP	DELETEW
	JMP	2,6
* COROUTINE U
U1	JMP	VALUES
	LDA	INTERTIME
	JMP	HOLD
	LD6	AVAIL
	J6P	1F
	LD6	POOLMAX(0:2)
	INC6	4
	ST6	POOLMAX(0:2)
	JMP	*+3
1H	LDA	0,6(rLINK1)
	STA	AVAIL
	LD1	INFLOOR
	ST1	0,6(IN)
	LD2	OUTFLOOR
	ST2	3,6(OUT)
	ENTA	39
	STA	2,6
U2	ENTA	0,4
	DECA	0,1
	ST6	TEMP
	JANZ	2F
	ENT6	ELEV1
	LDA	2,6(NEXTINST)
	DECA	E6
	JANZ	3F
	ENTA	E3
	STA	2,6(NEXTINST)
	JMP	DELETEW
	JMP	4F
3H	LDA	D3
	JAZ	2F
	ST6	D1
	STZ	D3
4H	JMP	IMMED
	JMP	U3
2H	DEC2	0,1
	ENTA	1
	J2P	*+3
	STA	CALL,1(5:5)
	JMP	*+2
	STA	CALL,1(1:1)
	LDA	D2
	JAZ	*+3
	LDA	ELEV1+2(NEXTINST)
	DECA	E1
	JAZ	DECISION
U3	LD6	TEMP
	LD1	0,6(IN)
	ENT1	QUEUE,1
	JMP	INSERT
U4A	LDA	GIVEUPTIME
	JMP	HOLDC
U4	LDA	0,6(IN)
	DECA	0,4
	JANZ	*+3
	LDA	D1
	JANZ	U4A
U6	JMP	DELETE
	LDA	AVAIL
	STA	0,6(RLINK1)
	ST6	AVAIL
	JMP	CYCLE
U5	JMP	DELETE
	ENT1	ELEVATOR
	JMP	INSERT
	ENTA	1
	LD2	3,6(OUT)
	STA	CALL,2(3:3)
	J5NZ	CYCLE
	DEC2	0,4
	ENT5	0,2
	ENT6	ELEV2
	JMP	DELETEW
	ENTA	25
	JMP	E5A
* COROUTINE E
E1A	JMP	CYCLE1
E1	EQU	*
E2A	JMP	HOLDC
E2	J5N	1F
	LDA	CALL+1,4
	ADD	CALL+2,4
	ADD	CALL+3,4
	ADD	CALL+4,4
	JAP	E3
	LDA	CALL-1,4(3:3)
	ADD	CALL-2,4(3:3)
	ADD	CALL-3,4(3:3)
	ADD	CALL-4,4(3:3)
	JMP	2F
1H	LDA	CALL-1,4
	ADD	CALL-2,4
	ADD	CALL-3,4
	ADD	CALL-4,4
	JAP	E3
	LDA	CALL+1,4(3:3)
	ADD	CALL+2,4(3:3)
	ADD	CALL+3,4(3:3)
	ADD	CALL+4,4(3:3)
2H	ENN5	0,5
	STZ	CALL,4
	JANZ	E3
	ENT5	0
E3	ENT6	ELEV3
	LDA	0,6
	JANZ	DELETEW
	ENTA	300
	JMP	HOLD
	ENT6	ELEV2
	ENTA	76
	JMP	HOLD
	ST6	D2
	ST6	D1
	ENTA	20
E4A	ENT6	ELEV1
	JMP	HOLDC
E4	ENTA	0,4
	SLA	4
	ENT6	ELEVATOR
1H	LD6	3,6(LLINK2)
	CMP6	=ELEVATOR=
	JE	1F
	CMPA	3,6(OUT)
	JNE	1B
	ENTA	U6
	JMP	2F
1H	LD6	QUEUE+3,4(RLINK2)
	CMP6	3,6(RLINK2)
	JE	1F
	JMP	DELETEW
	ENTA	U5
2H	STA	2,6(NEXTINST)
	JMP	IMMED
	ENTA	25
	JMP	E4A
1H	STZ	D1
	ST6	D3
	JMP	CYCLE
E5A	JMP	HOLDC
E5	LDA	D1
	JAZ	*+3
	ENTA	40
	JMP	E5A
	STZ	D3
	ENT6	ELEV1
	ENTA	20
	JMP	HOLDC
E6	J5N	*+2
	STZ	CALL,4(1:3)
	J5P	*+2
	STZ	CALL,4(3:5)
	J5Z	DECISION
E6B	J5Z	E1A
	LDA	D2
	JAZ	*+4
	ENT6	ELEV3
	JMP	DELETEW
	STZ	ELEV3
	ENT6	ELEV1
	ENTA	15
	J5N	E8A
E7A	JMP	HOLDC
E7	INC4	1
	ENTA	51
	JMP	HOLDC
	LDA	CALL,4(1:3)
	JAP	1F
	ENT1	-2,4
	J1Z	2F
	LDA	CALL,4(5:5)
	JAZ	E7
2H	LDA	CALL+1,4
	ADD	CALL+2,4
	ADD	CALL+3,4
	ADD	CALL+4,4
	JANZ	E7
1H	ENTA	14
	JMP	E2A
E8A	JMP	HOLDC
E8	DEC4	1
	ENTA	61
	JMP	HOLDC
	LDA	CALL,4(3:5)
	JAP	1F
	ENT1	-2,4
	J1Z	2F
	LDA	CALL,4(1:1)
	JAZ	E8
2H	LDA	CALL-1,4
	ADD	CALL-2,4
	ADD	CALL-3,4
	ADD	CALL-4,4
	JANZ	E8
1H	ENTA	23
	JMP	E2A
E9	STZ	0,6
	STZ	D2
	JMP	DECISION
	JMP	CYCLE
DECISION	STJ	7F
	J5NZ	7F			D1. Exit if state != NEUTRAL.
	ENT6	ELEV1			D2.
	LDA	ELEV1+2(NEXTINST)
	DECA	E1
	JANZ	3F			Elevator positioned at E1?
	LDA	CALL+2
	JANZ	3F			CALL variables at floor 2 not all zero?
	ENT3	E3
	JMP	6F			Send elevator to E3.
3H 	ENT1	-4			D3. Compute the smallest floor with a call, in rI1+4.
0H	ENT2	4,1
	DEC2	0,5
	J2Z	*+3			Make sure rI1 != FLOOR.
	ENTA	CALL+4,1
	JANZ	4F			If call variable nonzero, goto step 4.
	J1NN	*+3			Is rI1 >= 4 already?
	INC1	1
	JMP	0B
	LDA	ELEV1+2(NEXTINST)	No such floor.
	DECA	E6
	JANZ	7F			If elevator not at E6, then exit.
	ENT1	-2			Set rI1 <- 2-4.
4H	DEC1	-4,5			D4.
	J1Z	*+2			Don't update STATE if rI1 = FLOOR.
	ENT5	0,1			Set STATE accordingly.
5H	LDA	ELEV1+2(NEXTINST)
	DECA	E1
	JANZ	6F			Is elevator at E1?
	DEC1	2
	J1Z	7F			Is rI1 != 2?
	ENT3	E6			Send elevator to E6.
6H	ENTA	20			Send elevator to instruction stored in rI3.
	ST6	8F(0:2)
	ENT6	ELEV1
	ST3	2,6(NEXTINST)
	JMP	HOLD
8H	ENT6	*
7H	JMP	*
BEGIN	ENT4	2
	ENT5	0
	JMP	CYCLE
POOLMAX	NOP	POOL
POOL	END	BEGIN
